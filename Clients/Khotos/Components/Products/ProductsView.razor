@using System.Net.Http.Headers

@rendermode InteractiveServer

@inject NavigationManager nav
@inject IHttpClientFactory ClientFactory
@inject PreloadService PreloadService

<Preload LoadingText="Загрузка данных..." />

@if (categories == null)
{
    <p><em>Loading...</em></p>
    <button @onclick="GetData">get categories</button>
}
else
{
    foreach (var item in categories)
    {
        <h4>@item.Name:</h4>
        <ul>
            @foreach (var product in item.Products)
            {
                var link = $"/Product/{product.Id}/{product.Name}";
                <li><NavLink href="@link">@product.Name</NavLink></li>
            }
        </ul>
    }
}
<div class="my-3 alert alert-danger @(string.IsNullOrWhiteSpace(_errorMessage) ? "d-none" : "")" role="alert">@_errorMessage</div>


@code {
    [Inject]
    public HttpClient Http { get; set; }
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }


    private HttpClient httpClient;

    IList<Category> categories;

    private string? _errorMessage; // on-screen message
                                   // private List<ChatMessage> _messages = new();// list of messages in chat

    protected override async Task OnInitializedAsync()
    {
        _errorMessage = null;
        httpClient = ClientFactory.CreateClient("API");
        await GetData();
    }
    private async Task GetData()
    {
        try
        {
            PreloadService.Show();
            // var response = await httpClient.GetAsync("https://productsapi:8081/products/Categories/getcategorieslink");
        
            // var response = await httpClient.GetAsync("https://webgateway:8081/Products/getcategorieslink");
            // var response = await httpClient.GetAsync("https://webgateway:8081/products/Categories/getcategorieslink");
            var response = await httpClient.GetAsync("/products/Categories/getcategorieslink");
            if (response != null && response.IsSuccessStatusCode == true)
                categories = await response.Content.ReadFromJsonAsync<IList<Category>>();
            _errorMessage = response != null && response.IsSuccessStatusCode == true ? null : response?.StatusCode.ToString();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            _errorMessage = ex.Message;
        }
        finally
        {
            PreloadService.Hide();
        }
    }
}
